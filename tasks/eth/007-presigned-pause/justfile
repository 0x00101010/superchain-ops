set dotenv-load

export rpcUrl := env_var('ETH_RPC_URL')
export superchainConfigAddr := env_var('SUPERCHAIN_CONFIG_ADDR')
export safeAddr := env_var('SAFE_ADDR')
export location := `pwd`

jsonFile := ''

######################################
# During the ceremony ...
######################################

install: install-presigner

install-presigner:
    #!/usr/bin/env bash
    REPO_ROOT=`git rev-parse --show-toplevel`
    PATH="$REPO_ROOT/bin:$PATH"
    cd $REPO_ROOT
    mkdir -p bin || true
    GOBIN="$REPO_ROOT/bin" go install github.com/ethereum-optimism/presigner@v0.0.4

whoami hdPath='0':
    #!/usr/bin/env bash
    REPO_ROOT=`git rev-parse --show-toplevel`
    PATH="$REPO_ROOT/bin:$PATH"
    if [ -z "$SIMULATE_WITHOUT_LEDGER" ]; then
      eip712sign --address --hd-paths "m/44'/60'/{{hdPath}}'/0/0" --ledger
    else
      eip712sign --address --mnemonic "test test test test test test test test test test test junk"
    fi

sign hdPath jsonFile:
    #!/usr/bin/env bash
    set -x
    REPO_ROOT=`git rev-parse --show-toplevel`
    PATH="$REPO_ROOT/bin:$PATH"
    export INPUT_JSON_PATH="${location}/input.json"
    JSON_FILE=`realpath {{jsonFile}}`
    if [ -z "$SIMULATE_WITHOUT_LEDGER" ]; then
      presigner \
        --workdir . \
        --script-name SignFromInputJson \
        --rpc-url ${rpcUrl} \
        --json-file $JSON_FILE \
        --ledger \
        --hd-paths "m/44'/60'/{{hdPath}}'/0/0" \
        sign
    else
      presigner \
        --workdir . \
        --script-name SignFromInputJson \
        --rpc-url ${rpcUrl} \
        --json-file $JSON_FILE \
        --mnemonic "test test test test test test test test test test test junk" \
        --sender 0xE7dEA1306D9F829bA469d1904c50903b46ebd02e \
        sign
    fi

######################################
# Before the ceremony ...
######################################

prepare:
  #!/usr/bin/env bash
  set -x
  REPO_ROOT=`git rev-parse --show-toplevel`
  PATH="$REPO_ROOT/bin:$PATH"
  echo creating 3 tx...
  echo

  export INPUT_JSON_PATH="${location}/input.json"
  mkdir -p ${location}/tmp
  for nonce in 92 93 94
  do
    presigner \
      --workdir ${location} \
      --script-name SignFromInputJson \
      --chain 1 \
      --rpc-url ${rpcUrl} \
      --target-addr ${superchainConfigAddr} \
      --safe-addr ${safeAddr} \
      --safe-nonce ${nonce} \
      --json-file ${location}/tmp/tmp-${nonce}.json \
      create
    cat ${location}/tmp/tmp-${nonce}.json | jq . > ${location}/tx/draft-${nonce}.json
  done

######################################
# After the ceremony ...
######################################

merge jsonFile +signedFiles:
  #!/usr/bin/env bash
  REPO_ROOT=`git rev-parse --show-toplevel`
  PATH="$REPO_ROOT/bin:$PATH"
  JSON_FILE=`realpath {{jsonFile}}`
  presigner \
    --rpc-url ${rpcUrl} \
    --json-file $JSON_FILE \
    merge {{signedFiles}}

verify jsonFile:
  #!/usr/bin/env bash
  REPO_ROOT=`git rev-parse --show-toplevel`
  PATH="$REPO_ROOT/bin:$PATH"
  JSON_FILE=`realpath {{jsonFile}}`
  presigner \
    --workdir . \
    --script-name SignFromInputJson \
    --rpc-url ${rpcUrl} \
    --json-file $JSON_FILE \
    verify

simulate jsonFile:
  #!/usr/bin/env bash
  REPO_ROOT=`git rev-parse --show-toplevel`
  PATH="$REPO_ROOT/bin:$PATH"
  JSON_FILE=`realpath {{jsonFile}}`
  presigner \
    --workdir . \
    --script-name SignFromInputJson \
    --rpc-url ${rpcUrl} \
    --json-file $JSON_FILE \
    simulate
